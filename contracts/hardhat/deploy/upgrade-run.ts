import { ethers, upgrades } from "hardhat";

async function main() {
    const [deployer] = await ethers.getSigners();

    console.log("üöÄ Running upgrade script with deployer:", deployer.address);

    // Recupera o contrato proxy j√° implantado
    const participantStorageProxyAddress = "0x4a01a9bd1b52bE7E908937F01f4F3aAAc40122c2"; 
    console.log("üîç Found ParticipantStorage Proxy at:", participantStorageProxyAddress);

    // üîÑ Criando inst√¢ncia do contrato
    // üîó Endere√ßo do contrato ParticipantManager
    const participantManagerAddress = "0x8EAE5a67Def7b006E0bF279c514350731ceA4649";
    const ParticipantManager = await ethers.getContractFactory("ParticipantManager");
    const participantManager = ParticipantManager.attach(participantManagerAddress);

    // üîπ CONSULTANDO O PARTICIPANTE üîπ
    console.log("\nüîç Fetching participant before update...");
    let participant1 = await participantManager.getParticipant(1);
    console.log("üìå Participant Data:", participant1);

    // 2Ô∏è‚É£ Atualiza o contrato `ParticipantManager` para `ParticipantManagerV2`
    console.log("\nüì¢ Upgrading ParticipantManagerV2...");
    const ParticipantManagerV2 = await ethers.getContractFactory("ParticipantManagerV2");

    const pmv2 = await ParticipantManagerV2.deploy();
    await pmv2.waitForDeployment();

    //const upgradedParticipantManager = await upgrades.upgradeProxy(participantManager.target, ParticipantManagerV2);
    //await upgradedParticipantManager.waitForDeployment();


  // Criando a transa√ß√£o de atualiza√ß√£o do contrato
    const upgradedParticipantManager = await participantManager.upgradeToAndCall(
      pmv2.target,  // Novo endere√ßo da implementa√ß√£o
      "0x" // Chama `initializeV2()` (se existir)
    );

    // Aguarda a transa√ß√£o ser confirmada
    await upgradedParticipantManager.wait();

    console.log(`‚úÖ  Upgrade to ParticipantManagerV2 completed!`);

    // 1Ô∏è‚É£ Atualiza o contrato `ParticipantStorage` para `ParticipantStorageV2`
    console.log("\nüì¢ Upgrading ParticipantStorage to ParticipantStorageV2...");
    const ParticipantStorageV2 = await ethers.getContractFactory(
      "src/commitChain/ParticipantStorage-New/ParticipantStorageV2.sol:ParticipantStorageV2"
    );
    const upgradedStorage = await upgrades.upgradeProxy(
      participantStorageProxyAddress, 
      ParticipantStorageV2,
      {
        call: { fn: "configureParticipantManager", args: [participantManagerAddress] } // ‚ö†Ô∏è Chama `initializeV2()` ap√≥s upgrade
    });
    await upgradedStorage.waitForDeployment();
    console.log(`‚úÖ Upgrade to ParticipantStorageV2 completed!`);

    

    

    // 4Ô∏è‚É£ Valida a atualiza√ß√£o
    console.log("\nüîç Fetching migrated participant...");
    let participant = await upgradedStorage.getParticipant(1);
    console.log("üìå Migrated Participant Data:", participant);

    // 5Ô∏è‚É£ Atualiza o participante na V2
    console.log("\nüìù Updating participant name and description...");
    const txUpdate = await upgradedStorage.updateParticipant(1, "Alice V2 Updated", "New description added in V2");
    await txUpdate.wait();
    console.log("‚úÖ Participant updated successfully!");

    // 6Ô∏è‚É£ Consulta o participante atualizado
    console.log("\nüîç Fetching updated participant...");
    participant = await upgradedStorage.getParticipant(1);
    console.log("üìå Updated Participant Data:", participant);

    console.log("\n‚úÖ Upgrade, Migration, and Update Completed Successfully!");
}

// üöÄ Executa o script
main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ERROR:", error);
        process.exit(1);
    });