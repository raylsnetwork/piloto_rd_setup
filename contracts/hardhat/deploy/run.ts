import { ethers, upgrades } from "hardhat";

async function main() {
    const [deployer] = await ethers.getSigners();
    console.log("\nüöÄ Running test script with deployer:", deployer.address);

    // üîπ DEPLOY DA V1 üîπ

    // 1Ô∏è‚É£ DEPLOY DOS CONTRATOS BASE
    console.log("üì¢ Deploying ParticipantManager...");
    const ParticipantManager = await ethers.getContractFactory("ParticipantManager");
    const participantManager = await upgrades.deployProxy(
        ParticipantManager, 
        [
            deployer.address,
        ],
        {
            kind: 'uups',
            initializer: 'initialize(address)'
        }
    );
    await participantManager.waitForDeployment();
    console.log(`‚úÖ ParticipantManager deployed at: ${participantManager.target}`);

    console.log("üì¢ Deploying EnygmaManager...");
    const EnygmaManager = await ethers.getContractFactory("EnygmaManager");
    const enygmaManager = await EnygmaManager.deploy();
    await enygmaManager.waitForDeployment();
    console.log(`‚úÖ EnygmaManager deployed at: ${enygmaManager.target}`);

    console.log("üì¢ Deploying BroadcastManager...");
    const BroadcastManager = await ethers.getContractFactory("BroadcastManager");
    const broadcastManager = await BroadcastManager.deploy();
    await broadcastManager.waitForDeployment();
    console.log(`‚úÖ BroadcastManager deployed at: ${broadcastManager.target}`);

    // 2Ô∏è‚É£ DEPLOY DO PARTICIPANT STORAGE (USANDO UUPS)
    console.log("üì¢ Deploying ParticipantManager V1 (UUPS Proxy)...");
    const ParticipantStorage = await ethers.getContractFactory("ParticipantStorage");
    const participantStorage = await upgrades.deployProxy(
        ParticipantStorage, 
        [
            deployer.address,
            participantManager.target,
            enygmaManager.target,
            broadcastManager.target
        ],
        {
            kind: 'uups',
            initializer: 'initialize(address, address, address, address)',
            unsafeAllow: ["delegatecall"]
        }
    );
    await participantStorage.waitForDeployment();
    console.log(`‚úÖ ParticipantManager V1 deployed at: ${participantStorage.target}`);

    // üîπ ADICIONANDO UM PARTICIPANTE üîπ
    console.log("\nüìù Adding a new participant...");
    const txAdd = await participantManager.addParticipant(1, "Alice");
    await txAdd.wait();
    console.log("‚úÖ Participant added successfully!");

    // üîπ CONSULTANDO O PARTICIPANTE üîπ
    console.log("\nüîç Fetching participant before update...");
    let participant = await participantManager.getParticipant(1);
    console.log("üìå Participant Data:", participant);

    // üîπ ATUALIZANDO O PARTICIPANTE üîπ
    console.log("\nüìù Updating participant name...");
    const txUpdate = await participantManager.updateParticipantName(1, "Alice Updated");
    await txUpdate.wait();
    console.log("‚úÖ Participant updated successfully!");

    // üîπ CONSULTANDO NOVAMENTE AP√ìS ATUALIZA√á√ÉO üîπ
    console.log("\nüîç Fetching participant after update...");
    participant = await participantManager.getParticipant(1);
    console.log("üìå Updated Participant Data:", participant);

    console.log("\nüì¢ Upgrading ParticipantStorage to ParticipantStorageV2...");
    const ParticipantStorageV2 = await ethers.getContractFactory(
      "src/commitChain/ParticipantStorage-New/ParticipantStorageV2.sol:ParticipantStorageV2" // Caminho totalmente qualificado
    );
    const upgradedStorage = await upgrades.upgradeProxy(participantStorage.target, ParticipantStorageV2);
    await upgradedStorage.waitForDeployment();
    console.log(`‚úÖ Upgrade to ParticipantStorageV2 completed!`);
    

    // 2Ô∏è‚É£ Atualiza o contrato `ParticipantManager` para `ParticipantManagerV2`
    console.log("\nüì¢ Upgrading ParticipantManagerV2...");
    const ParticipantManagerV2 = await ethers.getContractFactory("ParticipantManagerV2");
    const upgradedParticipantManager = await upgrades.upgradeProxy(participantManager.target, ParticipantManagerV2);
    await upgradedParticipantManager.waitForDeployment();
    console.log(`‚úÖ ParticipantManagerV2 deployed at: ${upgradedParticipantManager.target}`);

    // üîπ CONSULTANDO AP√ìS UPGRADE üîπ
    console.log("\nüîç Fetching participant after upgrade...");
    participant = await participantStorage.getParticipant(1);
    console.log("üìå Participant Data after Upgrade:", participant);

    // 3Ô∏è‚É£ Atualiza o `ParticipantManager` no `ParticipantStorageV2`
    /*console.log("\nüîÑ Updating ParticipantManager address in ParticipantStorage...");
    const txConfig = await participantStorage.configureParticipantManager(participantManagerV2.target);
    await txConfig.wait();
    console.log("‚úÖ ParticipantManager address updated successfully!");*/


    // üîπ CONSULTANDO AP√ìS UPGRADE üîπ
    console.log("\nüîç Fetching participant after ParticipantManager update...");
    participant = await participantStorage.getParticipant(1);
    console.log("üìå Participant Data after Upgrade:", participant);

    // üîπ VALIDA√á√ÉO FINAL üîπ
    if (participant.chainId === 0n) {
        console.error("‚ùå ERROR: Participant data not found after upgrade!");
        process.exit(1);
    }

    console.log("\n‚úÖ Test Completed Successfully! üéâ");
}

// üöÄ EXECUTA O SCRIPT
main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ERROR:", error);
        process.exit(1);
    });